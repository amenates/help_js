// // ОБЪЕКТЫ
//
// // Объект это ящик с подписаными папками (папки это "ключ"), в папках могут храниться любые данные
// // Пустой объект (ящик), можно создать используя один из двух вариантов синтаксиса:
//
// let user1 = new Object(); // синтаксис "конструктор объекта"
// let user2 = {}; // синтаксис "литерал объекта" (обычно используют его)
//
// // user - это ящик
//
// // Литеральный синтаксис
// // Пары - "Ключ: значение":
//
// let user3 = { // объект user
//     name: 'John', // под Ключом "name" хранится значение "John"
//     age: 30 // под Ключом "age" хранится значение "30"
// };
//
// console.log(user3.name); // получим "John", из ящика user3 достали папку name и показали ее содержимое ("John")
// console.log(user3.age); // получим "30", из ящика user3 достали папку age и показали ее содержимое ("30")
//
// user3.isAdmin = true; // добавили свойство с логическим значением (значение может быть любого типа)
// console.log(user3.isAdmin); // true
//
// delete user3.age; // удалили свойство age
//
// // Имя сво-ва может быть из нескольких слов, например "likes birds"
// let user4 = {
//     name: 'John',
//     age: 30,
//     'likes birds': true, // имя свойства из нескольких слов, должно быть в кавычках
// };
//
// console.log(user4['likes birds']);
//
// // ------------------------------------------------------------------------
//
// let user5 = {}
//
// // присваиваем значение сво-ву
// user5['likes birds'] = true;
//
// // получаем значение в консоль
// console.log(user5['likes birds']);
//
// // удаляем сво-во
// delete user5['likes birds'];
//
// console.log(user5['likes birds']);
//
// // -----------------------------------------------------------------
// // Квадратные скобки также позволяют обратиться к свойству, имя которого может быть результатом выражения. Например, имя свойства может храниться в переменной:
//
// let key = 'likes birds';
// user5[key] = true; // то же самое, что и user5["likes birds"] = true;
//
// // ---------------------------------------------------------------------
// //Здесь переменная key может быть вычислена во время выполнения кода или зависеть от пользовательского ввода. После этого мы используем её для доступа к свойству. Это даёт нам большую гибкость.
//
// //Пример:
// let user6 = {
//     name: "John",
//     age: 30
// };
//
// let key2 = prompt("Что вы хотите узнать о пользователе?", "name");
//
// // доступ к свойству через переменную
// alert( user6[key2] ); // John (если ввели "name")
//
// // -----------------------------------------------------------------------

// let user7 = {};
// console.log(user7.noProperty === undefined); // проверяем наличия свойства NoProperty. true - означает что свойства нет
//
// // in
// // ('key'"' in object)
// let user8 = {name: 'John', age: 30};
// console.log('age' in user8); // true user8.age существует
// console.log('kuku' in user8); // false user8.kuku не существует
//
// // ----------------------
// let user9 = { age: 30 };
//
// let key3 = 'age';
// console.log( key3 in user9 ); // true, имя свойства было взято из переменной key


// Цикл for ... in
// Для перебора всех свойств объекта использцется for in
// Этот цикл отличается от изученного ранее цикла for(;;)
// Синтаксис:
// for (key in object) {
//     // тело цикла, выполняется для каждого свойства объекта
// }
//
// let user10 = {
//     name: 'John',
//     age: 30,
//     isAdmin: true,
// };
//
// for (let key10 in user10) {
//     // ключи
//     console.log(key10); // name, age, isAdmin
//     // значения ключей
//     console.log(user10[key10]); // John, 30, true
// }



let user = {
    name: 'john',
    surname: 'Smith',
};

user.name = 'Pete';
console.log(user.name);

delete user.name;
console.log('name' in user);




















// // Функция - консруктор
//
// // При помощи функции-конструктор можно создавать множество однотипных объектов, например пользователей, элементы меню и прочее
//
// // 1. Имя должно начинаться с большой буквы
// // 2. Функция-консруктор вызывается при помощи оператора new
//
// // Например:
// function User(name) {
//     this.name = name;
//     this.isAdmin = false;
// }
//
// let user = new User('Вася');
//
// console.log(user.name); // выведит Вася
// console.log(user.isAdmin); // выведет false


